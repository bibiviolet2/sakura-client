import { Container } from "inversify";
import { ArticleService } from "@services/ArticleService";
import { ArticlesService } from "@services/ArticlesService";
import { HomeViewModel } from "./Home/HomeViewModel";
import { ArticleDetailViewModel } from "./ArticleDetail/ArticleDetailViewModel";
import { BookService } from "@services/BookService";

const container = new Container();

// ðŸ“Œ Registrace sluÅ¾eb (ponechÃ¡me jako singletony, protoÅ¾e spravujÃ­ data)
container.bind(ArticleService).toSelf().inSingletonScope();
container.bind(ArticlesService).toSelf().inSingletonScope();
container.bind(BookService).toSelf().inSingletonScope();

// ðŸ“Œ ViewModely nebudou singletony, ale dynamicky se vytvoÅ™Ã­ pÅ™i kaÅ¾dÃ©m volÃ¡nÃ­
container.bind(HomeViewModel).toSelf().inSingletonScope(); // HomeViewModel mÅ¯Å¾e zÅ¯stat singleton
container
  .bind(ArticleDetailViewModel)
  .toDynamicValue(
    () =>
      new ArticleDetailViewModel(
        container.get(ArticleService),
        container.get(ArticlesService),
        container.get(BookService)
      )
  );

// ðŸ“Œ Exportujeme plnÄ› inicializovanÃ½ container
export { container };
